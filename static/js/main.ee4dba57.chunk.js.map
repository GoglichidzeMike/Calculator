{"version":3,"sources":["components/Buttons.jsx","components/Screen.jsx","components/Formula.jsx","App.js","serviceWorker.js","index.js"],"names":["operatorStyle","background","clearStyle","equalsStyle","position","height","bottom","Button","initialize","operators","evaluate","addToInput","className","id","onClick","style","value","Screen","currentVal","Formula","formula","endsWithOperator","App","useState","setFormula","setCurrentVal","evaluated","setEvaluated","Buttons","val","target","length","toDisplayBack","console","log","setTimeout","maxDigitWarning","endsWith","test","replace","newInput","slice","expression","answer","math","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ee4dba57.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst operatorStyle = { background: \"#023047\" },\r\n  clearStyle = { background: \"#E63946\" },\r\n  equalsStyle = {\r\n    background: \"#A8DADC\",\r\n    position: \"absolute\",\r\n    height: 130,\r\n    bottom: 5,\r\n  };\r\n\r\nconst Button = ({\r\n  initialize,\r\n  operators,\r\n  evaluate,\r\n  addToInput,\r\n  // decimal\r\n}) => {\r\n  return (\r\n    <div>\r\n      <button\r\n        className=\"jumbo\"\r\n        id=\"clear\"\r\n        onClick={initialize}\r\n        style={clearStyle}\r\n        value=\"AC\"\r\n      >\r\n        AC\r\n      </button>\r\n      <button id=\"divide\" onClick={operators} style={operatorStyle} value=\"/\">\r\n        /\r\n      </button>\r\n      <button id=\"multiply\" onClick={operators} style={operatorStyle} value=\"x\">\r\n        x\r\n      </button>\r\n      <button id=\"seven\" onClick={addToInput} value=\"7\">\r\n        7\r\n      </button>\r\n      <button id=\"eight\" onClick={addToInput} value=\"8\">\r\n        8\r\n      </button>\r\n      <button id=\"nine\" onClick={addToInput} value=\"9\">\r\n        9\r\n      </button>\r\n      <button id=\"subtract\" onClick={operators} style={operatorStyle} value=\"-\">\r\n        -\r\n      </button>\r\n      <button id=\"four\" onClick={addToInput} value=\"4\">\r\n        4\r\n      </button>\r\n      <button id=\"five\" onClick={addToInput} value=\"5\">\r\n        5\r\n      </button>\r\n      <button id=\"six\" onClick={addToInput} value=\"6\">\r\n        6\r\n      </button>\r\n      <button\r\n        id=\"add\"\r\n        onClick={operators}\r\n        style={operatorStyle}\r\n        className=\"operators\"\r\n        value=\"+\"\r\n      >\r\n        +\r\n      </button>\r\n      <button id=\"one\" onClick={addToInput} value=\"1\">\r\n        1\r\n      </button>\r\n      <button id=\"two\" onClick={addToInput} value=\"2\">\r\n        2\r\n      </button>\r\n      <button id=\"three\" onClick={addToInput} value=\"3\">\r\n        3\r\n      </button>\r\n      <button className=\"jumbo\" id=\"zero\" onClick={addToInput} value=\"0\">\r\n        0\r\n      </button>\r\n      <button id=\"decimal\" onClick={addToInput} value=\".\">\r\n        .\r\n      </button>\r\n      <button id=\"equals\" onClick={evaluate} style={equalsStyle} value=\"=\">\r\n        =\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react'\r\n\r\n\r\nconst Screen = ({currentVal}) =>{\r\n  \r\n\r\n  return(\r\n  <div className='outputScreen' id='display'>{currentVal}</div>\r\n  )\r\n}\r\n\r\n\r\nexport default Screen;","import React from 'react'\r\n\r\n\r\nconst Formula = ({formula}) =>{\r\n\r\n  return(\r\n  <div className='formulaScreen' >{formula}</div>\r\n  )\r\n}\r\n\r\n\r\nexport default Formula;","import React, { useState } from \"react\";\nimport * as math from \"mathjs\";\nimport \"./App.css\";\nimport Buttons from \"./components/Buttons\";\nimport Screen from \"./components/Screen\";\nimport Formula from \"./components/Formula\";\n\nconst endsWithOperator = /[*+-/]$/;\n\nfunction App() {\n  const [formula, setFormula] = useState(\"\");\n  const [currentVal, setCurrentVal] = useState(\"0\");\n  const [evaluated, setEvaluated] = useState(false);\n\n  const maxDigitWarning = () => {\n    //saves the current value parameter, to display the error\n    // message and then to display the current value back in 1 second.\n    let toDisplayBack = currentVal;\n    setCurrentVal(\"Digit Limit Met\");\n    console.log(toDisplayBack);\n    setTimeout(() => setCurrentVal(toDisplayBack), 1000);\n  };\n\n  const addToInput = (val) => {\n    if (currentVal !== \"Digit Limit Met\") {\n      const value = val.target.value;\n      if (currentVal.length > 21) {\n        maxDigitWarning();\n      } else if (value === \"0\" && formula === \"\") {\n        setCurrentVal(\"0\");\n      } else {\n        if (evaluated) {\n          initialize();\n          setFormula(value);\n          setCurrentVal(value);\n        } else {\n          setFormula(formula + value);\n          setCurrentVal(formula + value);\n        }\n      }\n    }\n  };\n\n  const handleEvaluate = () => {\n    if (currentVal !== \"Digit Limit Met\") {\n      //setting formula to variable since Slice doesn't change the const value.\n      let expression = formula;\n      if (formula !== \"\" && evaluated === false) {\n        while (endsWithOperator.test(expression)) {\n          expression = expression.slice(0, -1);\n        }\n\n        if(formula === \"-\"){\n          return\n        }\n\n        let answer = math.evaluate(expression);\n\n        setCurrentVal(answer);\n\n        setFormula(expression + \"=\" + answer);\n\n        setEvaluated(true);\n      }\n    }\n  };\n\n  const handleOperators = (val) => {\n    const value = val.target.value;\n    if (currentVal !== \"Digit Limit Met\") {\n      if (value === \"-\") {\n        if (evaluated) {\n          setFormula(currentVal + value);\n          setCurrentVal(value);\n          setEvaluated(false);\n        } else if (formula.endsWith(\"-\")) {\n          setFormula(formula);\n        } else {\n          setFormula(formula + value);\n          setCurrentVal(value);\n        }\n      }\n\n      if (!endsWithOperator.test(formula) && formula !== \"\") {\n        if (value === \"x\") {\n          if (evaluated) {\n            setFormula(currentVal + value.replace(\"x\", \"*\"));\n            setEvaluated(false);\n          } else {\n            setFormula(formula + value.replace(\"x\", \"*\"));\n            setCurrentVal(value);\n          }\n          //handle Multiply Button\n        } else if ((value === \"+\" || value === \"/\") && !formula.endsWith(\"-\")) {\n          //handle + & /\n          if (evaluated) {\n            setFormula(currentVal + value);\n            setCurrentVal(value);\n            setEvaluated(false);\n          } else {\n            setFormula(formula + value);\n            setCurrentVal(value);\n          }\n        } else if (formula.endsWith(\"-\")) {\n          if (evaluated) {\n            setFormula(currentVal + value);\n            setCurrentVal(value);\n            setEvaluated(false);\n          } else {\n            let newInput = formula.slice(0, -1);\n            setFormula(newInput + value);\n            setCurrentVal(value);\n          }\n        }\n      }\n    }\n  };\n\n  const initialize = () => {\n    setFormula(\"\");\n    setCurrentVal(\"0\");\n    setEvaluated(false);\n  };\n\n  return (\n    <div className=\"App\" id=\"app\">\n      <div id=\"calculator\" className=\"calculator\">\n        <Formula formula={formula} />\n        <Screen currentVal={currentVal} />\n        <Buttons\n          addToInput={addToInput}\n          operators={handleOperators}\n          evaluate={handleEvaluate}\n          initialize={initialize}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}